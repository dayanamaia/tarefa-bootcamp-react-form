{"version":3,"sources":["Components.js","App.js","serviceWorker.js","index.js"],"names":["SubmitButton","type","React","Component","FormInput","handleChange","e","target","name","value","props","onChange","htmlFor","this","label","placeholder","id","RegisterForm","setState","state","data","validaEmail","email","includes","formValidation","validate","objState","nomeCompleto","cidade","cpf","telefone","errors","handleSubmitForm","preventDefault","alert","show","msg","className","onSubmit","FormPage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9c3b174d.chunk.js","sourcesContent":["import React from 'react';\r\n// import InputMask from 'react-input-mask';\r\n\r\nclass SubmitButton extends React.Component {\r\n    render() {\r\n        return <button type=\"submit\">Inscrever</button>\r\n    }\r\n}\r\n\r\nclass FormInput extends React.Component {\r\n\r\n    handleChange = (e) => {\r\n        const {name, value} = e.target;\r\n\r\n        this.props.onChange(name, value);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n\r\n                <div>\r\n                    <label htmlFor={this.props.name}>{this.props.label}</label>\r\n                    <input type={this.props.type} name={this.props.name} placeholder={this.props.placeholder} id={this.props.name} value={this.props.value} onChange={this.handleChange} />\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass RegisterForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: {\r\n                nomeCompleto: '',\r\n                cidade: '',\r\n                email: '',\r\n                cpf: '',\r\n                telefone: ''\r\n            },\r\n            errors:{},\r\n            alert: {\r\n                show: false,\r\n                msg: ''\r\n            }\r\n        }\r\n    }\r\n\r\n    handleChange = (name, value) => this.setState((state) => {\r\n        return {\r\n            data: {\r\n                ...state.data,\r\n                [name]: value\r\n            }\r\n        }\r\n    });\r\n\r\n    validaEmail = email => email.includes('@') && email.includes('.');\r\n\r\n    formValidation = () => {\r\n        let validate= true;\r\n        let objState = {};\r\n\r\n        if(this.state.data.nomeCompleto === '') {\r\n            objState[\"nomeCompleto\"] = \"Por favor, digite o seu nome completo.\";\r\n            validate = false;\r\n        } else {\r\n            delete objState[\"nomeCompleto\"];\r\n        }\r\n\r\n        if(this.state.data.cidade === '') {\r\n            objState[\"cidade\"] = \"Por favor, digite a sua cidade atual.\";\r\n            validate = false;\r\n        } else {\r\n            delete objState[\"cidade\"];\r\n        }\r\n\r\n        if( this.state.data.email === '' || \r\n        (!this.state.data.email.includes('@') && !this.state.data.email.includes('.')) ) {\r\n            objState[\"email\"] = \"Por favor, digite o seu e-mail.\";\r\n            validate = false;\r\n        } else {\r\n            delete objState[\"email\"];\r\n        }\r\n\r\n        if(this.state.data.cpf === '') {\r\n            objState[\"cpf\"] = \"Por favor, digite o seu cpf.\";\r\n            validate = false;\r\n        } else {\r\n            delete objState[\"cpf\"];\r\n        }\r\n\r\n        if(this.state.data.telefone === '') {\r\n            objState[\"telefone\"] = \"Por favor, digite o seu telefone.\";\r\n            validate = false;\r\n        } else {\r\n            delete objState[\"cpf\"];\r\n        }\r\n\r\n        this.setState({errors: objState});\r\n        return validate;\r\n    }\r\n\r\n    handleSubmitForm = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(this.formValidation()) {\r\n            this.setState((state) => {\r\n                return {\r\n                    ...state,\r\n                    alert: {\r\n                        show: true,\r\n                        msg: 'Formul√°rio preenchido com sucesso!'\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                <h1>Cadastro de alunas</h1>\r\n\r\n                {this.state.alert.show && <div className=\"alert alert--sucess\">{this.state.alert.msg}</div>}\r\n\r\n                <form onSubmit={this.handleSubmitForm}>\r\n                    <FormInput type='text' name=\"nomeCompleto\" label=\"Nome completo\" value={this.state.data.nomeCompleto} onChange={this.handleChange} />\r\n                    {this.state.errors.nomeCompleto && <span className=\"error-input\">{this.state.errors.nomeCompleto}</span>}\r\n                    \r\n                    <FormInput type='text' name=\"cidade\" label=\"Cidade\" value={this.state.data.cidade} onChange={this.handleChange} />\r\n                    {this.state.errors.cidade && <span className=\"error-input\">{this.state.errors.cidade}</span>}\r\n                    \r\n                    <FormInput type='text' name=\"email\" label=\"E-mail\" value={this.state.data.email} placeholder=\"email@email.com\" onChange={this.handleChange} />\r\n                    {this.state.errors.email && <span className=\"error-input\">{this.state.errors.email}</span>}\r\n\r\n                    <FormInput type='text' name=\"cpf\" label=\"CPF\" value={this.state.data.cpf} placeholder=\"000.000.000-00\" onChange={this.handleChange} />\r\n                    {this.state.errors.cpf && <span className=\"error-input\">{this.state.errors.cpf}</span>}\r\n\r\n                    <FormInput type='text' name=\"telefone\" label=\"Telefone\" value={this.state.data.telefone} placeholder=\"(XX) XXXXX-XXXX\" onChange={this.handleChange} />\r\n                    {this.state.errors.telefone && <span className=\"error-input\">{this.state.errors.telefone}</span>}\r\n\r\n                    <SubmitButton />\r\n                </form>\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport class FormPage extends React.Component {\r\n    render() {\r\n        return(\r\n            <RegisterForm />\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\n\r\nimport { FormPage } from './Components.js';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container\">\r\n      <FormPage />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}